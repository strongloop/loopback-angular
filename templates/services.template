/**
 * @ngdoc overview
 * @name lbServices
 * @description
 * # lbServices
 *
 * The `lbServices` module provides services for interacting with the models
 * exposed by the LoopBack server via the REST API.
 *
 * {@installModule lbServices}
 *
 * <div doc-module-components="lbServices"></div>
 */
var module = angular.module('lbServices', ['ngResource']);
module
  .factory('LoopBackAuth', function() {
    return {
      accessToken: null
    };
  })
  .config(function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  })
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          console.log('config', config);
          if (LoopBackAuth.accessToken) {
            config.headers.authorization = LoopBackAuth.accessToken;
          }
          return config || $q.when(config);
        }
      }
    }])
  .factory('LoopBackResource', [ '$resource', function($resource) {
    return function(url, params, actions) {
      var resource = $resource(url, params, actions);

      // Angular always calls POST on $save()
      // This hack is based on
      // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
      resource.prototype.$save = function() {
        var fn = this.id === undefined ?
          this.$create :
          this.$prototype$updateAttributes;
        fn.apply(this, Array.prototype.slice.call(arguments));
      }

      return resource;
    };
  }]);

<% for (var modelName in models) {
     var meta = models[modelName];
-%>

/**
 * @ngdoc object
 * @name lbServices.<%-: modelName %>
 * @function
 *
 * A $resource object for interacting with the `<%-: modelName | q %>` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 * [[ TODO provide an example of performing basic CrUD operations,
 *    including filter/where find query ]]
 */
module.factory(<%-: modelName | q %>, ['$q', 'LoopBackResource', 'LoopBackAuth',
 function($q, Resource, LoopBackAuth) {
    return Resource(
      <%-: meta.url | q %>,
      {
<% for (var p in meta.paramDefaults) -%>
        <%- p %>: <%-: meta.paramDefaults[p] | q %>,
      },
      {
<% for (var methodName in meta.actions) {
     var action = meta.actions[methodName];
-%>

        /**
         * @ngdoc method
         * @name lbServices.<%- modelName %>#<%- methodName %>
         * @methodOf lbServices.<%- modelName %>
         *
         * @param {Object} parameters Request parameters.
<% if (!action._accepts || action._accepts.length == 0) { -%>
         * This method does not accept any parameters. Supply an empty object.
<% } else if (acceptsSingleBodyArgument(action._accepts)) { -%>
         * This method expects a subset of model properties as request parameters.
<% } else { -%>
         *
         * Object properties:
<%   action._accepts.forEach(function(arg) { -%>
         *
         * - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
   }
-%>
         *
         * @param {Function(Object, Object)=} successCb Success callback with
         *    two arguments: `value`, `responseHeaders`.
         *
         * @param {Function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @return {Object} An empty reference that will be populated with
         *    the actual data once the response is returned from the server.
<% if (!action._returns || action._returns.length == 0) { -%>
         * This method returns no data.
<% } else if (!action._returns[0].root) { -%>
         *
         * Data properties:
<%   action._returns.forEach(function(arg) { -%>
         *
         * - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
   }
-%>
         *
         * @description
         *
<% if (!action._description) {
action._description =  '<em>\n' +
  '(The remote method definition does not provide any description.)\n' +
  '</em>';
} -%>
         * <%-: action._description | replace:/\n/g, '\n         * ' %>
         */
        <%- methodName %>: {
<% for (var key in action) {
     if (action[key] === undefined) continue;
     if (key[0] == '_') continue;
-%>
          <%- key %>: <%-: action[key] | q %>,
<% } // for key in action -%>
<% if (modelName === 'User' && methodName === 'login') { -%>
          interceptor: {
            response: function(response) {
              var loginResult = response.data;
              LoopBackAuth.accessToken = loginResult.id;
              return response || $q.when(response);
            }
          }
<% } else if (modelName === 'User' && methodName === 'logout') { -%>
          interceptor: {
            response: function(response) {
              LoopBackAuth.accessToken = null;
              return response || $q.when(response);
            }
          }
<% } -%>
        },
<% } // for methodName -%>
      }
    );
  }]);
<% }

function acceptsSingleBodyArgument(accepts) {
  if (accepts.length != 1) return false;
  accepts = accepts[0];

  return accepts.type === 'object' &&
    accepts.http &&
    accepts.http.source === 'body';
}

function getJsDocType(arg) {
  var type = arg.type == 'any' ? '*' : arg.type;
  if (!arg.required) type += '=';
  return type;
}
-%>

